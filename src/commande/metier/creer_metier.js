const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const mongoose = require('mongoose');
const Recette = require('../../database/models/recetteModel');
const Metier = require('../../database/models/metierModel.js');
const MetierUtilisateur = require('../../database/models/metierUtilisateurModel')

const { createSuccessEmbed, createErrorEmbed } = require('../../utils/embeds');
const { parseRecettesString, validateRecettesExist, getUserMetierData } = require('../../utils/metierUtils');

module.exports = {
    commands: [
        {
            data: new SlashCommandBuilder()
                .setName('creer_metier')
                .setDescription('Cr√©e un nouveau m√©tier avec un niveau de base de 1.')
                .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
                .addStringOption(option =>
                    option.setName('nom')
                        .setDescription('Le nom du m√©tier')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('description')
                        .setDescription('Description du m√©tier')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('recettes')
                        .setDescription("IDs des recettes √† associer avec niveaux requis (ex: id1:10,id2:20)")
                        .setRequired(true)
                ),

            async execute(interaction) {
                const nom = interaction.options.getString('nom');
                const description = interaction.options.getString('description');
                const recettesStr = interaction.options.getString('recettes');

                try {
                    const recettes = await parseRecettesString(recettesStr);
                    const recettesIds = recettes.map(r => r.recetteId);

                    const recettesValides = await validateRecettesExist(recettesIds);
                    if (recettesValides.length !== recettesIds.length) {
                        return interaction.reply({
                            embeds: [createErrorEmbed("‚ùå Recettes invalides", "Une ou plusieurs recettes sp√©cifi√©es sont introuvables.")],
                            ephemeral: true
                        });
                    }

                    const existe = await Metier.findOne({name: nom});
                    if (existe) {
                        return interaction.reply({
                            embeds: [createErrorEmbed("‚ùå M√©tier existant", `Le m√©tier nomm√© ${nom} existe d√©j√†.`)],
                            ephemeral: true
                        });
                    }

                    const nouveauMetier = new Metier({
                        name: nom,
                        description,
                        niveauDeBase: 1,
                        niveauMax: 100,
                        xpParNiveau: 100,
                        recettes
                    });

                    await nouveauMetier.save();

                    const embed = createSuccessEmbed(
                        "üõ†Ô∏è Nouveau M√©tier Cr√©√©",
                        `Le m√©tier ${nom} a √©t√© cr√©√© avec un niveau de base de 1.`
                    );

                    embed.addFields(
                        {name: 'üìÑ Description', value: description},
                        {name: 'üìà Niveau de Base', value: '1', inline: true},
                        {name: 'üîù Niveau Maximum', value: '100', inline: true},
                        {
                            name: 'üß™ Recettes li√©es',
                            value: recettesValides.map(r => `‚Ä¢ ${r.name}`).join('\n') || 'Aucune',
                            inline: false
                        }
                    );

                    return interaction.reply({embeds: [embed]});

                } catch (err) {
                    console.error("Erreur cr√©ation m√©tier :", err);
                    return interaction.reply({
                        embeds: [createErrorEmbed("‚ùå Erreur serveur", "Une erreur est survenue lors de la cr√©ation du m√©tier.")],
                        ephemeral: true
                    });
                }
            }
        }

    ]
}